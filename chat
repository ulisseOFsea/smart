import React, { useState, useEffect, useRef } from 'react';
import { Card } from '@/components/ui/card';
import { 
  MessageSquare, User, Send, Loader, AlertCircle, TrendingUp, 
  Scale, Lightbulb, Target, CheckCircle, Brain
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const ROLES = {
  MARKETING: {
    role: "Marketing Manager",
    prompt: "Analizza questo messaggio dal punto di vista del marketing, concentrandoti su brand perception, engagement del cliente e strategie di marketing.",
    icon: "üíπ",
    color: "green"
  },
  OPERATIONS: {
    role: "Operations Manager",
    prompt: "Analizza questo messaggio dal punto di vista operativo, concentrandoti su efficienza, processi e ottimizzazione delle risorse.",
    icon: "‚öôÔ∏è",
    color: "blue"
  },
  SALES: {
    role: "Sales Manager",
    prompt: "Analizza questo messaggio dal punto di vista commerciale, concentrandoti su opportunit√† di vendita, pricing e strategie commerciali.",
    icon: "üíº",
    color: "purple"
  },
  EXECUTIVE: {
    role: "Executive Assistant",
    prompt: "Analizza questo messaggio dal punto di vista di un assistente esecutivo, concentrandoti su coordinamento, reporting e follow-up.",
    icon: "üìã",
    color: "orange"
  },
  SMART: {
    role: "Consulente SMART",
    prompt: "Analizza tutte le prospettive precedenti e fornisci una strategia SMART (Specific, Measurable, Achievable, Relevant, Time-bound) con azioni concrete e KPI misurabili.",
    icon: "üéØ",
    color: "red"
  }
};

const smartFramework = {
  S: "Specific (Specifico)",
  M: "Measurable (Misurabile)",
  A: "Achievable (Raggiungibile)",
  R: "Relevant (Rilevante)",
  T: "Time-bound (Temporalmente definito)"
};

const ChatGrid = () => {
  const [selectedChat, setSelectedChat] = useState(null);
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const messagesEndRef = useRef(null);
  
  const [chats, setChats] = useState({
    marketing: [
      {
        role: "assistant",
        content: `üëã Marketing Manager | Focus su:
‚Ä¢ Brand perception e posizionamento
‚Ä¢ Customer engagement e journey
‚Ä¢ ROI delle campagne marketing
‚Ä¢ Social media strategy
‚Ä¢ Content marketing
‚Ä¢ Customer analytics
‚Ä¢ Market research
‚Ä¢ Brand awareness

Approccio: Data-driven marketing con focus sul cliente.
KPI principali: Engagement rate, CAC, CLV, ROI campagne.`
      }
    ],
    operations: [
      {
        role: "assistant",
        content: `üëã Operations Manager | Focus su:
‚Ä¢ Efficienza operativa
‚Ä¢ Ottimizzazione processi
‚Ä¢ Gestione risorse
‚Ä¢ Controllo qualit√†
‚Ä¢ Supply chain
‚Ä¢ Automazione
‚Ä¢ Cost management
‚Ä¢ Performance metrics

Approccio: Lean management e miglioramento continuo.
KPI principali: Produttivit√†, tempi ciclo, costi operativi.`
      }
    ],
    sales: [
      {
        role: "assistant",
        content: `üëã Sales Manager | Focus su:
‚Ä¢ Revenue growth
‚Ä¢ Pipeline management
‚Ä¢ Lead qualification
‚Ä¢ Sales strategy
‚Ä¢ Customer relationships
‚Ä¢ Pricing optimization
‚Ä¢ Market opportunities
‚Ä¢ Sales forecasting

Approccio: Result-oriented con focus sul cliente.
KPI principali: Conversion rate, revenue, customer acquisition.`
      }
    ],
    executive: [
      {
        role: "assistant",
        content: `üëã Executive Assistant | Focus su:
‚Ä¢ Coordinamento inter-dipartimentale
‚Ä¢ Project tracking
‚Ä¢ Meeting management
‚Ä¢ Reporting esecutivo
‚Ä¢ Follow-up azioni
‚Ä¢ Deadline management
‚Ä¢ Documentazione
‚Ä¢ Comunicazione interna

Approccio: Organizzazione efficiente e supporto decisionale.
KPI principali: Completamento tasks, rispetto deadlines.`
      }
    ],
    smart: [
      {
        role: "assistant",
        content: `üëã Consulente SMART | Approccio strutturato:

S - Specific:
‚Ä¢ Analisi dettagliata di ogni prospettiva
‚Ä¢ Identificazione obiettivi concreti
‚Ä¢ Definizione azioni specifiche

M - Measurable:
‚Ä¢ KPI dedicati per area
‚Ä¢ Metriche di successo
‚Ä¢ Sistema di tracking

A - Achievable:
‚Ä¢ Valutazione risorse necessarie
‚Ä¢ Analisi fattibilit√†
‚Ä¢ Piano step-by-step

R - Relevant:
‚Ä¢ Allineamento strategico
‚Ä¢ Impatto sul business
‚Ä¢ Prioritizzazione

T - Time-bound:
‚Ä¢ Timeline dettagliata
‚Ä¢ Milestone intermedie
‚Ä¢ Review periodiche

Focus: Integrazione delle prospettive e piano d'azione concreto.
Approccio: Data-driven con framework SMART.
Output: Strategia actionable con KPI misurabili.`
      }
    ]
  });

  const analyzeWithSMART = (previousResponses) => {
    // Simulazione dell'analisi SMART basata sulle risposte precedenti
    let smartAnalysis = "üìä Analisi SMART delle prospettive precedenti:\n\n";
    
    // Aggiunge l'analisi strutturata SMART
    Object.entries(smartFramework).forEach(([letter, description]) => {
      smartAnalysis += `${letter} - ${description}:\n`;
      switch(letter) {
        case 'S':
          smartAnalysis += "‚Ä¢ Obiettivi chiari e definiti per ogni area\n";
          smartAnalysis += "‚Ä¢ Azioni concrete identificate\n";
          smartAnalysis += "‚Ä¢ Responsabilit√† assegnate\n\n";
          break;
        case 'M':
          smartAnalysis += "‚Ä¢ KPI definiti per area:\n";
          smartAnalysis += "  - Marketing: Engagement rate, ROI campagne\n";
          smartAnalysis += "  - Operations: Efficienza processi, tempi risposta\n";
          smartAnalysis += "  - Sales: Conversion rate, revenue growth\n\n";
          break;
        case 'A':
          smartAnalysis += "‚Ä¢ Target realistici basati su dati storici\n";
          smartAnalysis += "‚Ä¢ Risorse necessarie identificate\n";
          smartAnalysis += "‚Ä¢ Piano di implementazione graduale\n\n";
          break;
        case 'R':
          smartAnalysis += "‚Ä¢ Allineamento con obiettivi aziendali\n";
          smartAnalysis += "‚Ä¢ Prioritizzazione interventi\n";
          smartAnalysis += "‚Ä¢ Analisi costi-benefici\n\n";
          break;
        case 'T':
          smartAnalysis += "‚Ä¢ Timeline dettagliata di implementazione\n";
          smartAnalysis += "‚Ä¢ Milestone intermedie definite\n";
          smartAnalysis += "‚Ä¢ Review periodiche programmate\n\n";
          break;
      }
    });

    smartAnalysis += "\nüéØ Piano d'Azione Raccomandato:\n";
    smartAnalysis += "1. Priorit√† Immediate (0-30gg):\n";
    smartAnalysis += "   ‚Ä¢ Avvio automazioni operative critiche\n";
    smartAnalysis += "   ‚Ä¢ Setup dashboard KPI integrata\n\n";
    smartAnalysis += "2. Medio Termine (30-90gg):\n";
    smartAnalysis += "   ‚Ä¢ Lancio nuove strategie marketing\n";
    smartAnalysis += "   ‚Ä¢ Implementazione processi di vendita ottimizzati\n\n";
    smartAnalysis += "3. Lungo Termine (90-180gg):\n";
    smartAnalysis += "   ‚Ä¢ Valutazione ROI iniziative\n";
    smartAnalysis += "   ‚Ä¢ Aggiustamento strategie\n\n";

    smartAnalysis += "üìà Proiezioni e KPI Target:\n";
    smartAnalysis += "‚Ä¢ Crescita Revenue: +25% YoY\n";
    smartAnalysis += "‚Ä¢ Riduzione Costi: -15% operativi\n";
    smartAnalysis += "‚Ä¢ Customer Satisfaction: +30%\n";

    return smartAnalysis;
  };

  // Funzione per chiamare l'API di Claude
  const callClaudeAPI = async (prompt, context = '') => {
    try {
      const response = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': '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', // Sostituire con la tua API key
          'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify({
          model: 'claude-3-sonnet-20240229',
          max_tokens: 1000,
          messages: [
            {
              role: 'user',
              content: context ? `Contesto precedente:\n${context}\n\nAnalisi richiesta:\n${prompt}` : prompt
            }
          ]
        })
      });

      if (!response.ok) {
        throw new Error('Errore nella chiamata API');
      }

      const data = await response.json();
      return data.content[0].text;
    } catch (error) {
      console.error('Errore API:', error);
      throw error;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputText.trim() || isLoading) return;

    setIsLoading(true);
    setError(null);

    try {
      // Step 1: Marketing Analysis con Claude
      const marketingPrompt = `Sei un Marketing Manager esperto. Analizza la seguente situazione dal punto di vista marketing, 
        concentrandoti su brand perception, customer engagement, strategie di marketing e KPI:
        "${inputText}"
        
        Struttura la risposta includendo:
        ‚Ä¢ Brand Impact
        ‚Ä¢ Customer Engagement
        ‚Ä¢ Digital Strategy
        ‚Ä¢ Market Position
        ‚Ä¢ KPI specifici
        ‚Ä¢ Raccomandazioni immediate`;

      const marketingResponse = await callClaudeAPI(marketingPrompt);
      const newChats = {
        ...chats,
        marketing: [...chats.marketing, 
          { role: "user", content: inputText },
          { role: "assistant", content: marketingResponse }
        ]
      };

      // Step 2: Operations Analysis con Claude
      const operationsPrompt = `Sei un Operations Manager esperto. Analizza la seguente situazione e l'analisi marketing precedente, 
        concentrandoti su efficienza operativa, processi, risorse e qualit√†:
        
        Analisi Marketing precedente:
        ${marketingResponse}
        
        Struttura la risposta includendo:
        ‚Ä¢ Process Impact
        ‚Ä¢ Resource Allocation
        ‚Ä¢ Efficiency Metrics
        ‚Ä¢ Quality Control
        ‚Ä¢ KPI operativi
        ‚Ä¢ Piano di implementazione`;

      const operationsResponse = await callClaudeAPI(operationsPrompt, marketingResponse);
      newChats.operations = [...chats.operations,
        { role: "user", content: marketingResponse },
        { role: "assistant", content: operationsResponse }
      ];

      // Step 3: Sales Analysis con Claude
      const salesPrompt = `Sei un Sales Manager esperto. Analizza la situazione considerando le analisi precedenti di marketing e operations,
        concentrandoti su revenue, strategia commerciale, acquisizione clienti e pricing:
        
        Analisi precedenti:
        Marketing: ${marketingResponse}
        Operations: ${operationsResponse}
        
        Struttura la risposta includendo:
        ‚Ä¢ Revenue Impact
        ‚Ä¢ Sales Strategy
        ‚Ä¢ Customer Acquisition
        ‚Ä¢ Pricing Strategy
        ‚Ä¢ KPI commerciali
        ‚Ä¢ Piano d'azione vendite`;

      const salesResponse = await callClaudeAPI(salesPrompt, `${marketingResponse}\n${operationsResponse}`);
      newChats.sales = [...chats.sales,
        { role: "user", content: operationsResponse },
        { role: "assistant", content: salesResponse }
      ];

      // Step 4: Executive Analysis con Claude
      const executivePrompt = `Sei un Executive Assistant esperto. Coordina e sintetizza le analisi precedenti,
        creando un piano d'azione esecutivo:
        
        Analisi precedenti:
        Marketing: ${marketingResponse}
        Operations: ${operationsResponse}
        Sales: ${salesResponse}
        
        Struttura la risposta includendo:
        ‚Ä¢ Action Items prioritari
        ‚Ä¢ Timeline di implementazione
        ‚Ä¢ Resource Coordination
        ‚Ä¢ Stakeholder Communication
        ‚Ä¢ KPI di progetto
        ‚Ä¢ Piano di monitoraggio`;

      const executiveResponse = await callClaudeAPI(executivePrompt, 
        `${marketingResponse}\n${operationsResponse}\n${salesResponse}`);
      newChats.executive = [...chats.executive,
        { role: "user", content: salesResponse },
        { role: "assistant", content: executiveResponse }
      ];

      // Step 5: SMART Analysis finale con Claude
      const smartPrompt = `Sei un Consulente Strategico esperto nella metodologia SMART. 
        Analizza tutte le prospettive precedenti e fornisci un'analisi strutturata secondo il framework SMART:
        
        Analisi precedenti:
        Marketing: ${marketingResponse}
        Operations: ${operationsResponse}
        Sales: ${salesResponse}
        Executive: ${executiveResponse}
        
        Struttura la risposta secondo il framework SMART:
        S - Specific: obiettivi specifici e azioni concrete
        M - Measurable: KPI e metriche per ogni area
        A - Achievable: risorse necessarie e fattibilit√†
        R - Relevant: allineamento strategico e impatto
        T - Time-bound: timeline e milestone
        
        Includi anche:
        ‚Ä¢ Piano d'azione dettagliato (0-30gg, 30-90gg, 90-180gg)
        ‚Ä¢ Sistema di monitoraggio integrato
        ‚Ä¢ Risk assessment
        ‚Ä¢ Success metrics
        ‚Ä¢ Review points`;

      const smartResponse = await callClaudeAPI(smartPrompt,
        `${marketingResponse}\n${operationsResponse}\n${salesResponse}\n${executiveResponse}`);
      newChats.smart = [...chats.smart,
        { role: "user", content: executiveResponse },
        { role: "assistant", content: smartResponse }
      ];

      setChats(newChats);
      setInputText('');

    } catch (err) {
      setError('Si √® verificato un errore durante l\'analisi. Riprova.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const ChatMessage = ({ content, role, isLastMessage }) => (
    <div 
      className={`flex items-start space-x-2 p-2 ${role === 'user' ? 'justify-end' : ''}`}
      ref={isLastMessage ? messagesEndRef : null}
    >
      <div className={`flex-shrink-0 ${role === 'user' ? 'order-2' : ''}`}>
        <User className={`h-6 w-6 ${role === 'user' ? 'text-green-600' : 'text-blue-600'}`} />
      </div>
      <div className={`flex-1 rounded-lg p-3 ${
        role === 'user' 
          ? 'bg-green-50 text-green-800 ml-2 border border-green-200' 
          : 'bg-blue-50 text-blue-800 mr-2 border border-blue-200'
      }`}>
        <p className="text-sm leading-relaxed whitespace-pre-line">{content}</p>
      </div>
    </div>
  );

  const ChatCard = ({ roleKey, index }) => {
    const roleInfo = ROLES[roleKey];
    const messages = chats[roleKey.toLowerCase()];
    const isSmart = roleKey === 'SMART';

    const cardClass = `relative p-4 h-full overflow-hidden hover:shadow-lg transition-shadow duration-200 ${
      isSmart 
        ? 'bg-gradient-to-r from-red-50 to-orange-50' 
        : index === 0 
          ? 'bg-gradient-to-br from-green-50 to-blue-50' 
          : 'bg-white'
    }`;

    return (
      <Card 
        className={`h-full overflow-hidden hover:shadow-lg transition-shadow duration-200 ${
          isSmart 
            ? 'bg-gradient-to-r from-red-50 to-orange-50' 
            : index === 0 
              ? 'bg-gradient-to-br from-green-50 to-blue-50' 
              : 'bg-white'
        }`}
        onClick={() => setSelectedChat(index)}
      >
        <div className="h-full flex flex-col">
          <div className="flex-none flex items-center justify-between p-4 border-b">
            <h3 className="text-lg font-semibold flex items-center gap-2">
              <span>{roleInfo.icon}</span>
              {roleInfo.role}
              {isSmart && <Target className="h-5 w-5 text-red-600" />}
            </h3>
            <div className="flex items-center gap-2">
              {isSmart && <Brain className="h-5 w-5 text-red-600" />}
              <MessageSquare className="h-5 w-5 text-gray-400" />
            </div>
          </div>
          <div className="flex-1 overflow-y-auto p-4 space-y-2">
            {messages.map((message, idx) => (
              <ChatMessage 
                key={idx} 
                {...message} 
                isLastMessage={idx === messages.length - 1}
              />
            ))}
          </div>
        </div>
      </Card>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-100 to-blue-100 overflow-x-hidden">
      {/* Header */}
      <div className="sticky top-0 z-50 bg-gradient-to-br from-green-100 to-blue-100 p-4 shadow-md">
        <h1 className="text-2xl font-bold text-center text-green-800 mb-4">
          Analisi Multi-Prospettiva con Consulenza SMART
        </h1>
        
        {/* Input Form */}
        <form onSubmit={handleSubmit} className="bg-white p-4 rounded-lg shadow-md max-w-6xl mx-auto">
          <div className="flex flex-col gap-2">
            <div className="flex gap-2">
              <input
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                disabled={isLoading}
                className="flex-1 p-3 rounded-lg border-2 border-green-200 focus:border-green-400 focus:ring-2 focus:ring-green-200 focus:outline-none transition-colors duration-200 bg-green-50 disabled:opacity-50"
                placeholder="Inserisci una situazione aziendale per l'analisi multi-prospettiva..."
              />
              <button
                type="submit"
                disabled={isLoading}
                className="px-4 py-2 bg-gradient-to-r from-green-400 to-blue-400 text-white rounded-lg hover:from-green-500 hover:to-blue-500 transition-all duration-200 flex items-center gap-2 disabled:opacity-50"
              >
                {isLoading ? (
                  <Loader className="h-5 w-5 animate-spin" />
                ) : (
                  <Send className="h-5 w-5" />
                )}
                {isLoading ? 'Analisi...' : 'Invia'}
              </button>
            </div>
            
            {error && (
              <Alert variant="destructive" className="mt-2">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
          </div>
        </form>
      </div>

      {/* Chat Stack - maintaining 16:9 for each chat */}
      <div className="max-w-6xl mx-auto p-4 space-y-4">
        {Object.keys(ROLES).map((roleKey, index) => (
          <div 
            key={roleKey} 
            className="relative w-full" 
            style={{ paddingTop: '56.25%' }} // 16:9 aspect ratio
          >
            <div className="absolute top-0 left-0 w-full h-full">
              <ChatCard roleKey={roleKey} index={index} />
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ChatGrid;
